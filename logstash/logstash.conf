input {
  http {
    port => "${PORT:8080}"
    user => "${DRAIN_USER:user}"
    password => "${DRAIN_PASSWORD:password}"
  }
}

input {
  heartbeat {
    interval => 60
  }
}

filter{
  mutate {
    remove_field => ["headers"]
  }
  # grok {
  #   match => { "message" => "%{SYSLOG5424PRI}%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:syslog5424_ts}|-) +(?:%{DATA:syslog5424_host}|-) +(?:%{NOTSPACE:syslog5424_app}|-) +(?:%{NOTSPACE:syslog5424_proc}|-) +(?:%{WORD:syslog5424_msgid}|-) +(?:%{SYSLOG5424SD:syslog5424_sd}|-|)%{SPACE}%{GREEDYDATA:message}" }
  #   tag_on_failure => []
  #   overwrite => ["message"]
  #   break_on_match => false
  # }
  # grok {
  #   match => { "syslog5424_proc" => "^\[(%{WORD:cf_component})?/.+\]$" }
  #   tag_on_failure => []
  #   break_on_match => false
  # }
  # if [cf_component] == "RTR" {
  #     grok {
  #       match => { "message" => "%{HOSTNAME:host} - \[%{TIMESTAMP_ISO8601}\] \"%{WORD:http_method} %{URIPATH:http_uri} HTTP/%{NUMBER:http_version}\" %{POSINT:http_response} %{NONNEGINT:http_request_size} %{NONNEGINT:http_response_size} \"%{DATA:referrer}\" \"%{DATA:user_agent}\" \"%{IPORHOST:ip_source}:%{POSINT:ip_source_port}\" \"%{IPORHOST:ip_destination}:%{POSINT:ip_destination_port}\" x_forwarded_for\:\"%{DATA:x_forwarded_for}\" x_forwarded_proto:\"%{DATA:x_forwarded_proto}\" vcap_request_id:\"%{UUID:vcap_request_id}\" response_time:%{NUMBER:response_time} gorouter_time:%{NUMBER:gorouter_time} app_id:\"%{UUID:app_id}\" app_index:\"%{NONNEGINT:app_index}\" x_b3_traceid:\"%{DATA:x_b3_traceid}\" x_b3_spanid:\"%{DATA:x_b3_spanid}\" x_b3_parentspanid:\"%{DATA:x_b3_parentspanid}\" b3:\"%{DATA:b3}\"" }
  #       tag_on_failure => []
  #       break_on_match => false
  #     }
  #     mutate {
  #       remove_field => ["message"]
  #     }
  # }
  # if [cf_component] == "APP" {
  #   mutate { add_tag => ["CF-APP"] }
  #   if [message] =~ /^{.*}/ {
  #         json {
  #           source => "message"
  #           add_tag => [ "json", "parsed"]
  #         }
  #         mutate {
  #           remove_field => ["message"]
  #         }
  #       }
  # } else {
  #   mutate { add_tag => ["CF-PAAS"] }
  # }
  # grok {
  #   match => { "syslog5424_proc" => "^\[APP/PROC/WEB/(%{INT:cf_app_instance_index})?\]$" }
  #   tag_on_failure => []
  #   break_on_match => false
  # }
  # grok {
  #   match => { "syslog5424_host" => "^%{DATA:cf_org}\.%{DATA:cf_space}\.%{DATA:cf_app}?$" }
  #   tag_on_failure => []
  #   break_on_match => false
  # }
  # mutate { add_field => { "[@metadata][target_index]" => "index-%{+YYYY.MM}" } }

  mutate {
    add_field => { "[@metadata][NEWRELIC_KEY]" => "${NEWRELIC_LICENSE_KEY:notpresent}" }
    add_field => { "[@metadata][AWS_S3_PROXY]" => "${AWS_S3_PROXY:notpresent}" }  
  }

}

output {
  
  # Explicit support for environment variable expansion in conditionals is not yet supported, though it's very close: 
  # https://github.com/elastic/logstash/pull/13370
  #
  # There's a clever workaround described here...
  # https://github.com/elastic/logstash/issues/5115#issuecomment-214283550
  # https://github.com/elastic/logstash/issues/5115#issuecomment-279552849
  #
  # See the mutate filter above that sets this value
  if [@metadata][NEWRELIC_KEY] != "notpresent" {
    newrelic {
      base_uri => "${NEWRELIC_LOG_URI:https://log-api.newrelic.com/log/v1}"
      license_key => "[@metadata][NEWRELIC_KEY]"
    }
  }

  # if [@metadata][AWS_S3_PROXY] != "notpresent" {
  #   s3 {
  #     access_key_id => "${AWS_ACCESS_KEY_ID:yourawsaccesskeyid}"
  #     secret_access_key => "${AWS_SECRET_ACCESS_KEY:yourawsaccesskeysecret}"
  #     region => "${AWS_REGION:yourawsregion}"
  #     bucket => "${AWS_BUCKET:yourawsbucket}"
  #     endpoint => "${AWS_ENDPOINT:https://yourawsendpoint}"
  #     proxy_uri => "[@metadata][AWS_S3_PROXY]"
  #     validate_credentials_on_root_bucket => "false"
  #     additional_settings => { "force_path_style" => true }
  #   }
  # } else {
  #   s3 {
  #     access_key_id => "${AWS_ACCESS_KEY_ID:yourawsaccesskeyid}"
  #     secret_access_key => "${AWS_SECRET_ACCESS_KEY:yourawsaccesskeysecret}"
  #     region => "${AWS_REGION:yourawsregion}"
  #     bucket => "${AWS_BUCKET:yourawsbucket}"
  #     endpoint => "${AWS_ENDPOINT:https://yourawsendpoint}"
  #     validate_credentials_on_root_bucket => "false"
  #     additional_settings => { "force_path_style" => true }
  #   }
  # }
}
